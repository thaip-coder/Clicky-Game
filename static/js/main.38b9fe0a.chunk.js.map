{"version":3,"sources":["components/Title/Title.js","components/Card/Card.js","components/Nav/Nav.js","components/Wrapper/Wrapper.js","App.js","index.js"],"names":["Title","props","className","children","Card","value","id","onClick","clickEvent","alt","name","src","image","Nav","href","style","float","title","rightWrong","score","highScore","Wrapper","App","state","characters","currentScore","clicked","indexOf","increment","setState","concat","reset","shuffle","shuffledCards","array","i","length","j","Math","floor","random","shuffleCards","cards","newScore","this","map","key","Component","ReactDOM","render","document","getElementById"],"mappings":"6rFAKeA,G,YAFD,SAAAC,GAAK,OAAI,wBAAIC,UAAU,SAASD,EAAME,YCYrCC,G,MAZF,SAAAH,GAAK,OACd,yBACIC,UAAW,OACXG,MAAOJ,EAAMK,GACbC,QAAS,kBAAMN,EAAMO,WAAWP,EAAMK,MAEtC,yBAAKJ,UAAU,iBACX,yBAAKO,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,YCQ9BC,G,MAfH,SAAAZ,GAAK,OAEb,yBAAKC,UAAU,oCACX,wBAAIA,UAAU,gCACV,wBAAIA,UAAU,gCACV,uBAAGA,UAAU,eAAeY,KAAK,gBAAgBC,MAAO,CAACC,MAAO,SAAUf,EAAMgB,QAEpF,wBAAIf,UAAU,+BAA+BI,GAAG,MAAML,EAAMiB,YAC5D,wBAAIhB,UAAU,+BAA+BI,GAAG,WAAhD,kBAA0EL,EAAMkB,OAChF,wBAAIjB,UAAU,+BAA+BI,GAAG,OAAhD,eAAmEL,EAAMmB,eCPtEC,G,MAFC,SAAApB,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAME,Y,WCuG1CmB,E,2MAlFbC,MAAQ,CACNC,aACAC,aAAc,EACdL,UAAW,EACXF,WAAY,GACZQ,QAAS,I,EAIblB,WAAa,SAAAF,IAC6B,IAApC,EAAKiB,MAAMG,QAAQC,QAAQrB,IAC3B,EAAKsB,YACL,EAAKC,SAAS,CAAEH,QAAS,EAAKH,MAAMG,QAAQI,OAAOxB,MAEnD,EAAKyB,S,EAKXA,MAAQ,WAEN,EAAKF,SAAS,CACZJ,aAAc,EACdL,UAAW,EAAKG,MAAMH,UACtBF,WAAY,cACZQ,QAAS,KAEX,EAAKM,W,EAIPA,QAAU,WACR,IAAIC,EA5CN,SAAsBC,GACpB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAEzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IAFC,EAIlB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAJkC,KAI9BD,EAAMG,GAJwB,KAM3C,OAAOH,EAqCaO,CAAajB,GACjC,EAAKK,SAAS,CAAEa,MAAOT,K,EAIzBL,UAAY,WACV,IAAMe,EAAW,EAAKpB,MAAME,aAAe,EAC3C,EAAKI,SAAS,CACZJ,aAAckB,EACdzB,WAAY,KAGVyB,GAAY,EAAKpB,MAAMH,UACzB,EAAKS,SAAS,CAAET,UAAWuB,IAEL,KAAbA,GACT,EAAKd,SAAS,CAAEX,WAAY,kCAE9B,EAAKc,W,wEAIG,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEf,MAAM,wBACNE,MAAOyB,KAAKrB,MAAME,aAClBL,UAAWwB,KAAKrB,MAAMH,UACtBF,WAAY0B,KAAKrB,MAAML,aAGvB,kBAAC,EAAD,yDAGC0B,KAAKrB,MAAMC,WAAWqB,IAAI,SAAArB,GAAU,OACnC,kBAAC,EAAD,CACAsB,IAAKtB,EAAWlB,GAChBE,WAAY,EAAKA,WACjBoB,UAAW,EAAKA,UAChBG,MAAO,EAAKA,MACZC,QAAS,EAAKA,QACd1B,GAAIkB,EAAWlB,GACfM,MAAOY,EAAWZ,e,GA5EVmC,aClBlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.38b9fe0a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Title.css';\r\n\r\nconst Title = props => <h2 className=\"title\">{props.children}</h2>;\r\n \r\nexport default Title;","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = props => (\r\n    <div \r\n        className =\"card\" \r\n        value={props.id} \r\n        onClick={() => props.clickEvent(props.id)}\r\n    >\r\n        <div className=\"img-container\">\r\n            <img alt={props.name} src={props.image}/>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Card;","import React from 'react';\r\nimport './Nav.css';\r\n\r\nconst Nav = props => (\r\n    \r\n    <nav className='navbar navbar-light bg-light nav'>\r\n        <ul className='navbar navbar-light bg-light'>\r\n            <li className='navbar navbar-light bg-light'>\r\n                <a className='navbar-brand' href='/Clicky-Game/' style={{float: \"left\"}}>{props.title}</a>\r\n            </li>\r\n            <li className='navbar navbar-light bg-light' id='rw'>{props.rightWrong}</li>\r\n            <li className='navbar navbar-light bg-light' id='current'>Current Score: {props.score}</li>\r\n            <li className='navbar navbar-light bg-light' id='top'>High Score: {props.highScore}</li>\r\n        </ul>\r\n    </nav>\r\n    \r\n);\r\n\r\nexport default Nav;","import React from 'react';\r\nimport './Wrapper.css';\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>\r\n\r\nexport default Wrapper;","/* Importing React and App.css */\nimport React, { Component } from 'react';\nimport './App.css';\n/* Components Imported */\nimport Title from './components/Title';\nimport Card from  './components/Card';\nimport Nav from './components/Nav';\nimport Wrapper from './components/Wrapper'\n/* Importing characters */\nimport characters from './characters.json';\n\n//Function to shuffle the cards\nfunction shuffleCards(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    //Assigns J variable a random value\n    let j = Math.floor(Math.random() * (i + 1));\n    //Swaps value of J and I indexes of the array to shuffle the cards\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\n//Sets the state of the App\nclass App extends Component {\n  state = {\n    characters,\n    currentScore: 0,\n    highScore: 0,\n    rightWrong: \"\",\n    clicked: [],\n  };\n\n//Determines if what you clicked has been clicked already and increments score or resets the game\nclickEvent = id => {\n  if (this.state.clicked.indexOf(id) === -1) {\n      this.increment();\n      this.setState({ clicked: this.state.clicked.concat(id)});\n    } else {\n      this.reset();\n    }\n};\n\n//Resets the game and shuffles the cards\nreset = () => {\n  //Resets the state of the game and updates the highScore\n  this.setState({\n    currentScore: 0,\n    highScore: this.state.highScore,\n    rightWrong: \"Try Again??\",\n    clicked: []\n  });\n  this.shuffle();\n};\n\n//Established the state of the shuffled character cards\nshuffle = () => {\n  let shuffledCards = shuffleCards(characters);\n  this.setState({ cards: shuffledCards });\n};\n\n//Function updates the newScore by incrementing the currentScore\nincrement = () => {\n  const newScore = this.state.currentScore + 1;\n  this.setState({\n    currentScore: newScore,\n    rightWrong: \"\"\n  });\n  //If the newScore is higher than the highScore, replace highScore with newScore\n  if (newScore >= this.state.highScore) {\n    this.setState({ highScore: newScore });\n  //If newScore is 12, then you've won the game\n  } else if (newScore === 12) {\n    this.setState({ rightWrong: \"Congratulations! You've Won!!\"});\n  }\n  this.shuffle();\n};\n\n//Renders the page with all elements\nrender() {\n  return (\n    <Wrapper>\n      <Nav\n        title=\"Windwaker Clicky Game\"\n        score={this.state.currentScore}\n        highScore={this.state.highScore}\n        rightWrong={this.state.rightWrong}\n        />\n\n        <Title>\n          Click on each character, but not more than once!\n        </Title>\n        {this.state.characters.map(characters => (\n          <Card\n          key={characters.id}\n          clickEvent={this.clickEvent}\n          increment={this.increment}\n          reset={this.reset}\n          shuffle={this.shuffle}\n          id={characters.id}\n          image={characters.image}\n          />\n        ))}\n    </Wrapper>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}